<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<prerequisites>
		<maven>3.6.2</maven>
	</prerequisites>

	<groupId>org.organicdesign.jettyHttp2Sample</groupId>
	<artifactId>http2ServerJarSample</artifactId>
	<version>0.0.1</version>

	<name>HTTP/2 Server Jar Sample</name>
	<description>Minimal project for diagnosing HTTP/2 and related issues with Jetty and Kotlin packaged in a Jar file</description>
	<url>https://github.com/GlenKPeterson/http2-server-jar-sample</url>

	<build>
		<defaultGoal>process-classes</defaultGoal>
		<finalName>ROOT</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<archive>
						<!--<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>-->
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>org.organicdesign.jettyHttp2Sample.JettyHttp2SampleKt</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<filters>
								<!--
This prevents:
	SecurityException: Invalid signature file digest for Manifest main attributes
Solution from:
	https://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar/6743609#6743609
								-->
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
							<!-- Jar file would not return HTTP responses without this line -->
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<version>${kotlin.version}</version>
				<executions>
					<execution>
						<id>compile</id>
						<phase>process-sources</phase>
						<goals>
							<goal>compile</goal>
						</goals>
						<configuration>
							<sourceDirs>
								<source>src/main/java</source>
							</sourceDirs>
						</configuration>
					</execution>
					<execution>
						<id>test-compile</id>
						<phase>process-test-sources</phase>
						<goals>
							<goal>test-compile</goal>
						</goals>
						<configuration>
							<sourceDirs>src/test/java</sourceDirs>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<jvmTarget>${java.version}</jvmTarget>
					<args>
						<arg>-Xjvm-default=enable</arg>
					</args>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<!--
		I tried using jetty-alpn-server because I thought it provided the same stuff
		in a smaller package than jetty-alpn-conscrypt-server:
+- org.eclipse.jetty:jetty-alpn-conscrypt-server:jar:9.4.20.v20190813:compile
|  +- org.conscrypt:conscrypt-openjdk-uber:jar:2.1.0:compile
|  \- org.eclipse.jetty:jetty-alpn-server:jar:9.4.20.v20190813:compile

But I got:
IllegalStateException: No Server ALPNProcessors!
	at org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory.<init>(ALPNServerConnectionFactory.java:52)
		-->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-alpn-conscrypt-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.http2</groupId>
			<artifactId>http2-common</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.http2</groupId>
			<artifactId>http2-hpack</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.http2</groupId>
			<artifactId>http2-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
<!-- How much of conscrypt-openjdk is in:
+- org.eclipse.jetty:jetty-alpn-conscrypt-server:jar:9.4.20.v20190813:compile
|  +- org.conscrypt:conscrypt-openjdk-uber:jar:2.1.0:compile
|  \- org.eclipse.jetty:jetty-alpn-server:jar:9.4.20.v20190813:compile
???
When I have both, the shade plugin says they overwrite each other.
-->
<!--		<dependency>-->
<!--			<groupId>org.conscrypt</groupId>-->
<!--			<artifactId>conscrypt-openjdk</artifactId>-->
<!--			<version>2.2.1</version>-->
<!--			<classifier>linux-x86_64</classifier>-->
<!--		</dependency>-->
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
		    <version>1.7.28</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
	</dependencies>
	<properties>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>11</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<kotlin.version>1.6.0</kotlin.version>
		<kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
		<jetty.version>9.4.24.v20191120</jetty.version>
	</properties>
</project>